INPUT:

def sjf_non_preemptive_scheduling():
    processes = int(input("Enter the number of processes: "))

    # Initialize arrays for arrival times and burst times
    at = [0] * processes  # Arrival times
    bt = [0] * processes  # Burst times
    ct = [0] * processes  # Completion times
    wt = [0] * processes  # Waiting times
    tt = [0] * processes  # Turnaround times

    # Get arrival and burst times from the user
    print("Enter the arrival times:")
    for i in range(processes):
        at[i] = int(input(f"Process {i + 1} arrival time: "))

    print("Enter the burst times:")
    for i in range(processes):
        bt[i] = int(input(f"Process {i + 1} burst time: "))

    # Create a list of processes with their arrival and burst times
    processes_list = []
    for i in range(processes):
        processes_list.append([at[i], bt[i], i + 1])  # [arrival_time, burst_time, process_id]

    # Sort processes based on arrival time first, then burst time (ascending)
    processes_list.sort(key=lambda x: (x[0], x[1]))

    # Variables to keep track of the time and the order of execution
    time = 0
    completed = 0
    waiting_time_total = 0
    turnaround_time_total = 0

    # Queue for storing processes that are ready to execute
    ready_queue = []
    pending_processes = processes_list.copy()  # Copy the list for processing

    while completed < processes:
        # Add all processes that have arrived to the ready queue
        for process in pending_processes[:]:
            if process[0] <= time:  # If process has arrived by the current time
                ready_queue.append(process)  # Add process to ready queue
                pending_processes.remove(process)  # Remove the process from pending list

        # Sort the ready queue based on burst time (Shortest Job First)
        ready_queue.sort(key=lambda x: x[1])  # Sort by burst time (ascending)

        if ready_queue:
            # Select the process with the shortest burst time
            current_process = ready_queue.pop(0)
            start_time = time
            time += current_process[1]  # Add burst time to the current time
            ct[current_process[2] - 1] = time  # Completion time

            # Calculate waiting time and turnaround time
            wt[current_process[2] - 1] = start_time - current_process[0]
            tt[current_process[2] - 1] = ct[current_process[2] - 1] - current_process[0]

            waiting_time_total += wt[current_process[2] - 1]
            turnaround_time_total += tt[current_process[2] - 1]

            completed += 1
        else:
            # If no process is ready, increment time
            time += 1

    # Output the results
    print("\nProcess\tArrival\tBurst\tCompletion\tWaiting\tTurnaround")
    for i in range(processes):
        print(f"P{i + 1}\t{at[i]}\t{bt[i]}\t{ct[i]}\t\t{wt[i]}\t\t{tt[i]}")

    # Calculate averages
    print(f"\nAverage Waiting Time: {waiting_time_total / processes:.2f}")
    print(f"Average Turnaround Time: {turnaround_time_total / processes:.2f}")

def main():
    sjf_non_preemptive_scheduling()

if __name__ == "__main__":
    main()


OUTPUT:

Enter the number of processes: 4
Enter the arrival times:
Process 1 arrival time: 1
Process 2 arrival time: 2
Process 3 arrival time: 1
Process 4 arrival time: 4
Enter the burst times:
Process 1 burst time: 3
Process 2 burst time: 4
Process 3 burst time: 2
Process 4 burst time: 4

Process Arrival Burst   Completion      Waiting Turnaround
P1      1       3       6               2               5
P2      2       4       10              4               8
P3      1       2       3               0               2
P4      4       4       14              6               10

Average Waiting Time: 3.00
Average Turnaround Time: 6.25